# We want to the system library paths as well (for /usr/lib64 and such)
PKG_CONFIG_ALLOW_SYSTEM_LIBS=yes
export PKG_CONFIG_ALLOW_SYSTEM_LIBS

pkgconfig_add_path()
{
  if [ -n "$PKG_CONFIG_PATH" ] ; then
    PKG_CONFIG_PATH="$1/$LIB/pkgconfig:$1/share/pkgconfig:$PKG_CONFIG_PATH"
  else
    PKG_CONFIG_PATH="$1/$LIB/pkgconfig:$1/share/pkgconfig"
  fi
  export PKG_CONFIG_PATH
}

pkgconfig_query_package()
{
  echo "Search for $1"
  pkg-config --exists $1
  if [ "$?" -ne "0" ] ; then
    echo ""
    echo "  Unable to find a compatible $2 installation. Please make"
    echo "  sure the correct version is installed including the header files."
    echo "  You can use the \"--$2-prefix\" option to search in an"
    echo "  alternative installation directory."
    echo ""
    return 0
  fi

  PKG_VERSION=$(pkg-config --modversion $1 --print-errors --errors-to-stdout)
  PKG_PREFIX=$(pkg-config --variable=prefix $1)
  PKG_PREFIX=$(echo $PKG_PREFIX | tr -d '"')
  PKG_LDFLAGS=$(pkg-config --libs-only-L $1)
  PKG_LIBS=$(pkg-config --libs-only-l --libs-only-other $1)
  PKG_CFLAGS=$(pkg-config --cflags-only-other $1)
  PKG_CPPFLAGS=$(pkg-config --cflags-only-I $1)

  echo "  Found $2 $PKG_VERSION in $PKG_PREFIX"
  echo ""
	return 1
}

pkgconfig_package_flags()
{
  PKG_LDFLAGS=$(pkg-config --libs-only-L $1)
  PKG_LIBS=$(pkg-config --libs-only-l --libs-only-other $1)
  PKG_CFLAGS=$(pkg-config --cflags-only-other $1)
  PKG_CPPFLAGS=$(pkg-config --cflags-only-I $1)
}


add_plugin_config()
{
  echo "#define HAVE_$(echo $1 | tr '[:lower:]' '[:upper:]')_PLUGIN" >> src/ap_config.h
  PLUGINS="$PLUGINS $1"
}

add_plugin_package()
{
	pkgconfig_query_package "$1" "$2"
  if [ "$?" -eq "0" ] ; then
		return 0
	fi
	add_plugin_config "$2"
	PACKAGES="$PACKAGES $1"
  return 1
}


################################################################################

check_fox()
{
  pkgconfig_query_package "fox >= 1.7" "fox"
  if [ $? -eq 0 ] ; then
    exit 1
  fi
  if [ -n "$PKG_CFLAGS" ] ; then CFLAGS="$CFLAGS $PKG_CFLAGS "; fi
  if [ -n "$PKG_CPPFLAGS" ] ; then CPPFLAGS="$CPPFLAGS $PKG_CPPFLAGS " ; fi
}


check_expat()
{
  LIBS="$LIBS -lexpat"
}

check_alsa()
{
  if [ $OPTION_PLUGIN_ALSA -eq 1 ] ; then
    pkgconfig_query_package "alsa >= 1.0" alsa
    if [ $? -eq 1 ] ; then
      if [ -n "$PKG_CFLAGS" ] ; then ALSA_CFLAGS="$PKG_CFLAGS "; fi
      if [ -n "$PKG_CPPFLAGS" ] ; then ALSA_CPPFLAGS="$PKG_CPPFLAGS " ; fi
      if [ -n "$PKG_LDFLAGS" ] ; then ALSA_LIBS="$PKG_LDFLAGS " ; fi
      if [ -n "$PKG_LIBS" ] ; then ALSA_LIBS="$PKG_LIBS " ; fi
      add_plugin_config alsa
    fi
  fi
}

check_pulse()
{
  if [ $OPTION_PLUGIN_PULSE -eq 1 ] ; then
    pkgconfig_query_package "libpulse >= 0.9.21" pulse
    if [ $? -eq 1 ] ; then
      if [ -n "$PKG_CFLAGS" ] ; then PULSE_CFLAGS="$PKG_CFLAGS"; fi
      if [ -n "$PKG_CPPFLAGS" ] ; then PULSE_CPPFLAGS="$PKG_CPPFLAGS" ; fi
      if [ -n "$PKG_LDFLAGS" ] ; then PULSE_LIBS="$PKG_LDFLAGS" ; fi
      if [ -n "$PKG_LIBS" ] ; then PULSE_LIBS="$PKG_LIBS" ; fi
      add_plugin_config pulse
    fi
  fi
}

check_rsound()
{
  if [ $OPTION_PLUGIN_RSOUND -eq 1 ] ; then
    pkgconfig_query_package "rsound" rsound
    if [ $? -eq 1 ] ; then
      if [ -n "$PKG_CFLAGS" ] ; then RSOUND_CFLAGS="$PKG_CFLAGS"; fi
      if [ -n "$PKG_CPPFLAGS" ] ; then RSOUND_CPPFLAGS="$PKG_CPPFLAGS" ; fi
      if [ -n "$PKG_LDFLAGS" ] ; then RSOUND_LIBS="$PKG_LDFLAGS" ; fi
      if [ -n "$PKG_LIBS" ] ; then RSOUND_LIBS="$PKG_LIBS" ; fi
      add_plugin_config rsound
    fi
  fi
}

check_jack()
{
  if [ $OPTION_PLUGIN_JACK -eq 1 ] ; then
    pkgconfig_query_package "jack >= 0.118" jack
    if [ $? -eq 1 ] ; then
      if [ -n "$PKG_CFLAGS" ] ; then JACK_CFLAGS="$PKG_CFLAGS"; fi
      if [ -n "$PKG_CPPFLAGS" ] ; then JACK_CPPFLAGS="$PKG_CPPFLAGS" ; fi
      if [ -n "$PKG_LDFLAGS" ] ; then JACK_LIBS="$PKG_LDFLAGS" ; fi
      if [ -n "$PKG_LIBS" ] ; then JACK_LIBS="$PKG_LIBS" ; fi
      add_plugin_config jack
    fi
  fi
}

check_oss()
{
  if [ $OPTION_PLUGIN_OSS -eq 1 ] ; then
    OSS_CPPFLAGS="-idirafter /usr/include/sys "
    add_plugin_config oss
  fi
}

check_musepack()
{
  if [ $OPTION_PLUGIN_MUSEPACK -eq 1 ] ; then
    echo "Search for musepack"
    if [ -e $MUSEPACK_PREFIX/$LIB/libmpcdec.so ] ; then
      echo "  Found musepack"
      PLUGIN_LIBS="$PLUGIN_LIBS -lmpcdec "
      add_plugin_config musepack
    fi
    echo " "
  fi
}

check_forced_mad()
{
  if [ $OPTION_PLUGIN_MAD -eq 1 ] && [ $OPTION_PLUGIN_FORCE_MAD -eq 1 ] && [ "$PLUGINS" != *mad* ] ; then
    echo "Adding mad"
    PLUGIN_LIBS="$PLUGIN_LIBS -lmad"
    if [ -n $MAD_PREFIX ] ; then
      PLUGIN_CPPFLAGS="$PLUGIN_CPPFLAGS -I${MAD_PREFIX}/include"
    fi
    add_plugin_config mad
    echo " "
  fi
}


check_faad()
{
  if [ $OPTION_PLUGIN_FAAD -eq 1 ] ; then
    echo "Search for faad"
    if [ -e $FAAD_PREFIX/$LIB/libfaad${LIBEXT} ] ; then
      echo "  Found faad: $FAAD_PREFIX/$LIB/libfaad${LIBEXT}"
      PLUGIN_LIBS="$PLUGIN_LIBS -lfaad -lmp4ff"
      add_plugin_config aac
    elif [ $OPTION_PLUGIN_FORCE_FAAD -eq 1 ] ; then
      echo "  Adding faad"
      PLUGIN_LIBS="$PLUGIN_LIBS -lfaad -lmp4ff"
      add_plugin_config aac
    fi
    echo " "
  fi
}


check_packages()
{
  if [ $OPTION_PLUGIN_OGG -eq 1 ] ; then
    add_plugin_package "ogg >= 1.0" "ogg"
  fi

  if [ $OPTION_PLUGIN_VORBIS -eq 1 ] ; then
    add_plugin_package "vorbis >= 1.2" "vorbis"
  fi

  if [ $OPTION_PLUGIN_FLAC -eq 1 ] ; then
    add_plugin_package "flac >= 1.2" "flac"
  fi

  if [ $OPTION_PLUGIN_MAD -eq 1 ] ; then
    add_plugin_package "mad >= 0.15" "mad"
  fi

  if [ $OPTION_PLUGIN_SAMPLERATE -eq 1 ] ; then
    add_plugin_package "samplerate >= 0.1" "samplerate"
  fi

  if [ $OPTION_PLUGIN_AVCODEC -eq 1 ] ; then
    add_plugin_package "libavcodec" "avcodec"
    add_plugin_package "libavformat" "avformat"
  fi

  if [ $OPTION_PLUGIN_CDDA -eq 1 ] ; then
    add_plugin_package "libcdio_cdda" "cdda"
  fi

  if [ $OPTION_PLUGIN_MMS -eq 1 ] ; then
    add_plugin_package "libmms" "mms"
  fi


  if [ -n "$PACKAGES" ] ; then
    pkgconfig_package_flags "$PACKAGES"
    if [ -n "$PKG_LDFLAGS" ] ; then PLUGIN_LIBS="$PLUGIN_LIBS $PKG_LDFLAGS"; fi
    if [ -n "$PKG_LIBS" ] ; then PLUGIN_LIBS="$PLUGIN_LIBS $PKG_LIBS"; fi
    if [ -n "$PKG_CPPFLAGS" ] ; then PLUGIN_CPPFLAGS="$PLUGIN_CPPFLAGS $PKG_CPPFLAGS"; fi
    if [ -n "$PKG_CFLAGS" ] ; then PLUGIN_CFLAGS="$PLUGIN_CFLAGS $PKG_CFLAGS"; fi
  fi
}








